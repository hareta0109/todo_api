package main

import (
	"todo_api/internal/adapter/inbound/http/handler"
	"todo_api/internal/adapter/outbound/mysql/repository"
	"todo_api/internal/usecase"

	_ "todo_api/docs" // docs is generated by Swag CLI, you have to import it.

	echojwt "github.com/labstack/echo-jwt/v4"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

//	@title		TODO API
//	@version	1.0
//	@host		localhost:8080
//	@BasePath	/api/v1
func main() {
	// Echo instance
	e := echo.New()

	// DB connection
	dsn := "user:pass@tcp(127.0.0.1:3306)/task_db?charset=utf8mb4&parseTime=True&loc=Local" // TODO: 環境変数を利用する
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		e.Logger.Fatal(err)
	}

	// repository
	authRepository := repository.NewAuthRepository(db)
	companyRepository := repository.NewCompanyRepostiroy(db)
	userRepository := repository.NewUserRepository(db)
	taskRepository := repository.NewTaskRepository(db)

	// usecase
	authUsecase := usecase.NewAuthUsecase(authRepository, companyRepository)
	companyUsecase := usecase.NewCompanyUsecase(companyRepository)
	userUsecase := usecase.NewUserUsecase(userRepository, companyRepository)
	taskUsecase := usecase.NewTaskUsecase(userRepository, taskRepository)

	// handler
	authHandler := handler.NewAuthHandler(authUsecase)
	companyHandler := handler.NewCompanyHandler(authUsecase, companyUsecase)
	userHandler := handler.NewUserHandler(authUsecase, userUsecase)
	taskHandler := handler.NewTaskHandler(authUsecase, taskUsecase)

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.GET("/swagger/*", echoSwagger.WrapHandler)

	apiRoute := e.Group("/api/v1")
	{
		apiRoute.GET("/healthz", healthCheck)
	}

	// login
	authRoute := apiRoute.Group("/auth")
	{
		authRoute.POST("/login", authHandler.Login)
	}

	// 以下は認証が必要
	companyRoute := apiRoute.Group("/company")
	companyRoute.Use(echojwt.WithConfig(handler.Config))
	{
		// company
		companyRoute.POST("/create", companyHandler.Create)

		companyIDRoute := companyRoute.Group("/:company_id")
		{
			companyIDRoute.GET("", companyHandler.Get)
			companyRoute.PUT("/update", companyHandler.Update)
		}

		// user
		userRoute := companyIDRoute.Group("/user")
		{
			userRoute.POST("/create", authHandler.Create)

			userIDRoute := userRoute.Group("/:user_id")
			{
				userIDRoute.GET("", userHandler.Get)
				userIDRoute.PUT("/update", authHandler.Update)
			}
		}

		// task
		taskRoute := companyIDRoute.Group("/task")
		{
			taskRoute.POST("/create", taskHandler.Create)
			taskRoute.GET("/list", taskHandler.ListByCompanyID)
			taskRoute.GET("/list_by_assigned_user_id/:assigned_user_id", taskHandler.ListByAssignedUserID)

			taskIDRoute := taskRoute.Group("/:task_id")
			{
				taskIDRoute.GET("", taskHandler.Find)
				taskIDRoute.PUT("/update", taskHandler.Update)
				taskIDRoute.PUT("/status/:status", taskHandler.UpdateStatus)
			}
		}
	}

	e.Logger.Fatal(e.Start(":8080"))
}

// HealthCheck
//
//	@Summary		ヘルスチェック
//	@Description	ヘルスチェック
//	@Tags			root
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	map[string]interface{}
//	@Router			/healthz [get]
func healthCheck(c echo.Context) error {
	return c.String(200, "Healthy")
}
